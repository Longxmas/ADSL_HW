
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN BREAK COMMA CONST CONTINUE DEF DIVIDE ELSE EQUAL FOR FORMATSTRING GETINT GREATER GREATEREQUAL IDENTIFIER IF IN INT INTCONST LBRACE LBRACKET LESS LESSEQUAL LOGICALAND LOGICALOR LPAREN MAIN MINUS MOD NOT NOTEQUAL PARALLEL PLUS PRINTF RBRACE RBRACKET RETURN RPAREN SEMICOLON TIMESCompUnit : Decl CompUnit\n                | FuncDef CompUnit\n                | MainFuncDefDecl : ConstDecl\n            | VarDeclConstDecl : CONST BType ConstDefList SEMICOLONConstDefList : ConstDef\n                    | ConstDef COMMA ConstDefListConstDef : IDENTIFIER ASSIGN ConstInitVal\n                | IDENTIFIER LBRACKET ConstExp RBRACKET ASSIGN ConstInitVal\n                | IDENTIFIER LBRACKET ConstExp RBRACKET LBRACKET ConstExp RBRACKET ASSIGN ConstInitValConstInitVal : ConstExp\n                    | LBRACE ConstInitValList RBRACEConstInitValList : ConstInitVal\n                        | ConstInitVal COMMA ConstInitValListConstExp : AddExpBType : INTVarDecl : BType VarDef SEMICOLON\n               | BType VarDef COMMA VarDef SEMICOLONVarDef : IDENTIFIER\n              | IDENTIFIER ASSIGN InitVal\n              | IDENTIFIER LBRACKET ConstExp RBRACKET\n              | IDENTIFIER LBRACKET ConstExp RBRACKET ASSIGN InitValInitVal : Exp\n               | LBRACE InitVal RBRACEExp : AddExpLOrExp : LAndExp\n              | LOrExp LOGICALOR LAndExpLAndExp : EqExp\n               | LAndExp LOGICALAND EqExpAddExp : MulExp\n              | AddExp PLUS MulExp\n              | AddExp MINUS MulExpMulExp : UnaryExp\n              | MulExp TIMES UnaryExp\n              | MulExp DIVIDE UnaryExp\n              | MulExp MOD UnaryExpEqExp : RelExp\n             | EqExp EQUAL RelExp\n             | EqExp NOTEQUAL RelExpRelExp : AddExp\n              | RelExp LESS AddExp\n              | RelExp LESSEQUAL AddExp\n              | RelExp GREATER AddExp\n              | RelExp GREATEREQUAL AddExpUnaryExp : PrimaryExp\n                | IDENTIFIER LPAREN FuncRParams RPAREN\n                | UnaryOp UnaryExpUnaryOp : PLUS\n               | MINUS\n               | NOTPrimaryExp : LPAREN Exp RPAREN\n                  | LVal\n                  | INTCONSTLVal : IDENTIFIER\n            | IDENTIFIER LBRACKET Exp RBRACKETMainFuncDef : INT MAIN LPAREN RPAREN BlockStmt : LVal ASSIGN Exp SEMICOLON\n            | Exp SEMICOLON\n            | SEMICOLON\n            | Block\n            | IF LPAREN Cond RPAREN Stmt ELSE Stmt\n            | IF LPAREN Cond RPAREN Stmt\n            | FOR LPAREN ForStmt SEMICOLON Cond SEMICOLON ForStmt RPAREN Stmt\n            | BREAK SEMICOLON\n            | CONTINUE SEMICOLON\n            | RETURN Exp SEMICOLON\n            | RETURN SEMICOLON\n            | LVal ASSIGN GETINT LPAREN RPAREN SEMICOLON\n            | PRINTF LPAREN FormatString PRINTFParams RPAREN SEMICOLON\n            | PARALLEL LPAREN IDENTIFIER IN LBRACKET list RBRACKET RPAREN LBRACE statements RBRACEPRINTFParams : Exp\n                    | Exp COMMA PRINTFParamsPRINTFParams : ForStmt : LVal ASSIGN Exp\n               | list : Exp\n            | list COMMA Expstatements : StmtFuncDef : DEF IDENTIFIER LPAREN FuncFParams RPAREN Block\n               | DEF IDENTIFIER LPAREN RPAREN BlockFuncFParams : FuncFParam\n                   | FuncFParam COMMA FuncFParamsFuncFParam : IDENTIFIERFuncRParams : Exp\n                   | Exp COMMA FuncRParamsBlock : LBRACE RBRACE\n             | LBRACE BlockItems RBRACEBlockItems : BlockItem\n                  | BlockItem BlockItemsBlockItem : Decl\n                 | StmtCond : LOrExpFormatString : FORMATSTRING'
    
_lr_action_items = {'DEF':([0,2,3,5,6,24,33,56,65,77,78,110,],[7,7,7,-4,-5,-18,-6,-81,-19,-80,-87,-88,]),'INT':([0,2,3,5,6,9,24,33,56,57,65,77,78,80,81,82,85,86,110,113,116,117,119,141,149,167,182,185,190,197,201,],[8,8,8,-4,-5,16,-18,-6,-81,16,-19,-80,-87,16,-91,-92,-60,-61,-88,-59,-65,-66,-68,-67,-58,-63,-69,-70,-62,-64,-71,]),'CONST':([0,2,3,5,6,24,33,56,57,65,77,78,80,81,82,85,86,110,113,116,117,119,141,149,167,182,185,190,197,201,],[9,9,9,-4,-5,-18,-6,-81,9,-19,-80,-87,9,-91,-92,-60,-61,-88,-59,-65,-66,-68,-67,-58,-63,-69,-70,-62,-64,-71,]),'$end':([1,4,11,12,59,78,110,],[0,-3,-1,-2,-57,-87,-88,]),'SEMICOLON':([5,6,17,18,21,22,24,33,37,38,39,40,42,43,46,47,50,51,54,57,60,61,62,65,75,76,78,80,81,82,83,84,85,86,89,90,91,94,102,103,104,105,106,107,108,110,113,115,116,117,118,119,122,126,128,129,130,133,134,135,136,137,138,141,147,149,151,166,167,168,169,170,171,172,173,174,175,176,177,178,182,183,185,189,190,194,197,198,201,],[-4,-5,24,-20,33,-7,-18,-6,65,-55,-21,-24,-26,-31,-34,-46,-53,-54,-16,85,-8,-9,-12,-19,-48,-22,-87,85,-91,-92,-53,113,-60,-61,116,117,119,-55,-25,-32,-33,-35,-36,-37,-52,-88,-59,-76,-65,-66,141,-68,-13,-47,-56,-23,149,-93,-27,-29,-38,-41,160,-67,-10,-58,85,182,-63,-28,-30,-39,-40,-42,-43,-44,-45,184,-75,185,-69,85,-70,-11,-62,85,-64,85,-71,]),'IF':([5,6,24,33,57,65,78,80,81,82,85,86,110,113,116,117,119,141,149,151,167,182,183,185,190,194,197,198,201,],[-4,-5,-18,-6,87,-19,-87,87,-91,-92,-60,-61,-88,-59,-65,-66,-68,-67,-58,87,-63,-69,87,-70,-62,87,-64,87,-71,]),'FOR':([5,6,24,33,57,65,78,80,81,82,85,86,110,113,116,117,119,141,149,151,167,182,183,185,190,194,197,198,201,],[-4,-5,-18,-6,88,-19,-87,88,-91,-92,-60,-61,-88,-59,-65,-66,-68,-67,-58,88,-63,-69,88,-70,-62,88,-64,88,-71,]),'BREAK':([5,6,24,33,57,65,78,80,81,82,85,86,110,113,116,117,119,141,149,151,167,182,183,185,190,194,197,198,201,],[-4,-5,-18,-6,89,-19,-87,89,-91,-92,-60,-61,-88,-59,-65,-66,-68,-67,-58,89,-63,-69,89,-70,-62,89,-64,89,-71,]),'CONTINUE':([5,6,24,33,57,65,78,80,81,82,85,86,110,113,116,117,119,141,149,151,167,182,183,185,190,194,197,198,201,],[-4,-5,-18,-6,90,-19,-87,90,-91,-92,-60,-61,-88,-59,-65,-66,-68,-67,-58,90,-63,-69,90,-70,-62,90,-64,90,-71,]),'RETURN':([5,6,24,33,57,65,78,80,81,82,85,86,110,113,116,117,119,141,149,151,167,182,183,185,190,194,197,198,201,],[-4,-5,-18,-6,91,-19,-87,91,-91,-92,-60,-61,-88,-59,-65,-66,-68,-67,-58,91,-63,-69,91,-70,-62,91,-64,91,-71,]),'PRINTF':([5,6,24,33,57,65,78,80,81,82,85,86,110,113,116,117,119,141,149,151,167,182,183,185,190,194,197,198,201,],[-4,-5,-18,-6,92,-19,-87,92,-91,-92,-60,-61,-88,-59,-65,-66,-68,-67,-58,92,-63,-69,92,-70,-62,92,-64,92,-71,]),'PARALLEL':([5,6,24,33,57,65,78,80,81,82,85,86,110,113,116,117,119,141,149,151,167,182,183,185,190,194,197,198,201,],[-4,-5,-18,-6,93,-19,-87,93,-91,-92,-60,-61,-88,-59,-65,-66,-68,-67,-58,93,-63,-69,93,-70,-62,93,-64,93,-71,]),'IDENTIFIER':([5,6,7,8,10,15,16,19,24,25,26,27,33,34,35,36,41,44,45,48,49,52,57,58,63,65,66,67,69,70,71,72,73,78,80,81,82,85,86,91,109,110,112,113,114,115,116,117,119,121,123,124,125,127,141,142,143,149,151,152,153,154,155,156,157,158,159,160,161,167,179,180,181,182,183,184,185,190,193,194,197,198,201,],[-4,-5,13,-17,18,23,-17,28,-18,18,38,38,-6,23,38,38,38,-49,-50,38,38,-51,94,28,38,-19,38,38,38,38,38,38,38,-87,94,-91,-92,-60,-61,38,38,-88,38,-59,38,140,-65,-66,-68,144,38,38,38,38,-67,38,-94,-58,94,38,38,38,38,38,38,38,38,38,38,-63,38,38,38,-69,94,140,-70,-62,38,94,-64,94,-71,]),'LBRACE':([5,6,24,26,30,32,33,35,41,55,57,63,65,78,80,81,82,85,86,109,110,113,116,117,119,123,125,141,149,151,167,181,182,183,185,190,194,195,197,198,201,],[-4,-5,-18,41,57,57,-6,63,41,57,57,63,-19,-87,57,-91,-92,-60,-61,41,-88,-59,-65,-66,-68,63,63,-67,-58,57,-63,63,-69,57,-70,-62,57,198,-64,57,-71,]),'LPAREN':([5,6,13,14,24,26,27,33,35,36,38,41,44,45,48,49,52,57,63,65,66,67,69,70,71,72,73,78,80,81,82,85,86,87,88,91,92,93,94,109,110,112,113,114,116,117,119,123,124,125,127,131,141,142,143,149,151,152,153,154,155,156,157,158,159,160,161,167,179,180,181,182,183,185,190,193,194,197,198,201,],[-4,-5,19,20,-18,48,48,-6,48,48,66,48,-49,-50,48,48,-51,48,48,-19,48,48,48,48,48,48,48,-87,48,-91,-92,-60,-61,114,115,48,120,121,66,48,-88,48,-59,48,-65,-66,-68,48,48,48,48,150,-67,48,-94,-58,48,48,48,48,48,48,48,48,48,48,48,-63,48,48,48,-69,48,-70,-62,48,48,-64,48,-71,]),'INTCONST':([5,6,24,26,27,33,35,36,41,44,45,48,49,52,57,63,65,66,67,69,70,71,72,73,78,80,81,82,85,86,91,109,110,112,113,114,116,117,119,123,124,125,127,141,142,143,149,151,152,153,154,155,156,157,158,159,160,161,167,179,180,181,182,183,185,190,193,194,197,198,201,],[-4,-5,-18,51,51,-6,51,51,51,-49,-50,51,51,-51,51,51,-19,51,51,51,51,51,51,51,-87,51,-91,-92,-60,-61,51,51,-88,51,-59,51,-65,-66,-68,51,51,51,51,-67,51,-94,-58,51,51,51,51,51,51,51,51,51,51,51,-63,51,51,51,-69,51,-70,-62,51,51,-64,51,-71,]),'PLUS':([5,6,24,26,27,33,35,36,38,41,42,43,44,45,46,47,48,49,50,51,52,54,57,63,65,66,67,69,70,71,72,73,75,78,80,81,82,83,85,86,91,94,103,104,105,106,107,108,109,110,112,113,114,116,117,119,123,124,125,126,127,128,137,141,142,143,149,151,152,153,154,155,156,157,158,159,160,161,167,172,173,174,175,179,180,181,182,183,185,190,193,194,197,198,201,],[-4,-5,-18,44,44,-6,44,44,-55,44,69,-31,-49,-50,-34,-46,44,44,-53,-54,-51,69,44,44,-19,44,44,44,44,44,44,44,-48,-87,44,-91,-92,-53,-60,-61,44,-55,-32,-33,-35,-36,-37,-52,44,-88,44,-59,44,-65,-66,-68,44,44,44,-47,44,-56,69,-67,44,-94,-58,44,44,44,44,44,44,44,44,44,44,44,-63,69,69,69,69,44,44,44,-69,44,-70,-62,44,44,-64,44,-71,]),'MINUS':([5,6,24,26,27,33,35,36,38,41,42,43,44,45,46,47,48,49,50,51,52,54,57,63,65,66,67,69,70,71,72,73,75,78,80,81,82,83,85,86,91,94,103,104,105,106,107,108,109,110,112,113,114,116,117,119,123,124,125,126,127,128,137,141,142,143,149,151,152,153,154,155,156,157,158,159,160,161,167,172,173,174,175,179,180,181,182,183,185,190,193,194,197,198,201,],[-4,-5,-18,45,45,-6,45,45,-55,45,70,-31,-49,-50,-34,-46,45,45,-53,-54,-51,70,45,45,-19,45,45,45,45,45,45,45,-48,-87,45,-91,-92,-53,-60,-61,45,-55,-32,-33,-35,-36,-37,-52,45,-88,45,-59,45,-65,-66,-68,45,45,45,-47,45,-56,70,-67,45,-94,-58,45,45,45,45,45,45,45,45,45,45,45,-63,70,70,70,70,45,45,45,-69,45,-70,-62,45,45,-64,45,-71,]),'NOT':([5,6,24,26,27,33,35,36,41,44,45,48,49,52,57,63,65,66,67,69,70,71,72,73,78,80,81,82,85,86,91,109,110,112,113,114,116,117,119,123,124,125,127,141,142,143,149,151,152,153,154,155,156,157,158,159,160,161,167,179,180,181,182,183,185,190,193,194,197,198,201,],[-4,-5,-18,52,52,-6,52,52,52,-49,-50,52,52,-51,52,52,-19,52,52,52,52,52,52,52,-87,52,-91,-92,-60,-61,52,52,-88,52,-59,52,-65,-66,-68,52,52,52,52,-67,52,-94,-58,52,52,52,52,52,52,52,52,52,52,52,-63,52,52,52,-69,52,-70,-62,52,52,-64,52,-71,]),'RBRACE':([5,6,24,33,38,40,42,43,46,47,50,51,54,57,62,65,68,75,78,79,80,81,82,85,86,96,97,102,103,104,105,106,107,108,110,111,113,116,117,119,122,126,128,141,145,149,167,182,185,190,197,199,200,201,],[-4,-5,-18,-6,-55,-24,-26,-31,-34,-46,-53,-54,-16,78,-12,-19,102,-48,-87,110,-89,-91,-92,-60,-61,122,-14,-25,-32,-33,-35,-36,-37,-52,-88,-90,-59,-65,-66,-68,-13,-47,-56,-67,-15,-58,-63,-69,-70,-62,-64,201,-79,-71,]),'MAIN':([8,],[14,]),'COMMA':([17,18,22,28,31,38,39,40,42,43,46,47,50,51,54,61,62,75,76,97,100,102,103,104,105,106,107,108,122,126,128,129,147,163,187,188,189,196,],[25,-20,34,-84,58,-55,-21,-24,-26,-31,-34,-46,-53,-54,-16,-9,-12,-48,-22,123,127,-25,-32,-33,-35,-36,-37,-52,-13,-47,-56,-23,-10,179,193,-77,-11,-78,]),'ASSIGN':([18,23,76,83,94,98,128,139,140,165,],[26,35,109,112,-55,125,-56,161,-55,181,]),'LBRACKET':([18,23,38,94,98,140,164,],[27,36,67,67,124,67,180,]),'RPAREN':([19,20,28,29,31,38,42,43,46,47,50,51,74,75,95,99,100,103,104,105,106,107,108,126,128,132,133,134,135,136,137,142,143,148,150,162,163,168,169,170,171,172,173,174,175,177,179,184,186,191,192,],[30,32,-84,55,-82,-55,-26,-31,-34,-46,-53,-54,108,-48,-83,126,-85,-32,-33,-35,-36,-37,-52,-47,-56,151,-93,-27,-29,-38,-41,-74,-94,-86,166,178,-72,-28,-30,-39,-40,-42,-43,-44,-45,-75,-74,-76,-73,194,195,]),'TIMES':([38,43,46,47,50,51,75,83,94,103,104,105,106,107,108,126,128,],[-55,71,-34,-46,-53,-54,-48,-53,-55,71,71,-35,-36,-37,-52,-47,-56,]),'DIVIDE':([38,43,46,47,50,51,75,83,94,103,104,105,106,107,108,126,128,],[-55,72,-34,-46,-53,-54,-48,-53,-55,72,72,-35,-36,-37,-52,-47,-56,]),'MOD':([38,43,46,47,50,51,75,83,94,103,104,105,106,107,108,126,128,],[-55,73,-34,-46,-53,-54,-48,-53,-55,73,73,-35,-36,-37,-52,-47,-56,]),'RBRACKET':([38,42,43,46,47,50,51,53,54,64,75,101,103,104,105,106,107,108,126,128,146,187,188,196,],[-55,-26,-31,-34,-46,-53,-54,76,-16,98,-48,128,-32,-33,-35,-36,-37,-52,-47,-56,165,192,-77,-78,]),'LESS':([38,43,46,47,50,51,75,103,104,105,106,107,108,126,128,136,137,170,171,172,173,174,175,],[-55,-31,-34,-46,-53,-54,-48,-32,-33,-35,-36,-37,-52,-47,-56,156,-41,156,156,-42,-43,-44,-45,]),'LESSEQUAL':([38,43,46,47,50,51,75,103,104,105,106,107,108,126,128,136,137,170,171,172,173,174,175,],[-55,-31,-34,-46,-53,-54,-48,-32,-33,-35,-36,-37,-52,-47,-56,157,-41,157,157,-42,-43,-44,-45,]),'GREATER':([38,43,46,47,50,51,75,103,104,105,106,107,108,126,128,136,137,170,171,172,173,174,175,],[-55,-31,-34,-46,-53,-54,-48,-32,-33,-35,-36,-37,-52,-47,-56,158,-41,158,158,-42,-43,-44,-45,]),'GREATEREQUAL':([38,43,46,47,50,51,75,103,104,105,106,107,108,126,128,136,137,170,171,172,173,174,175,],[-55,-31,-34,-46,-53,-54,-48,-32,-33,-35,-36,-37,-52,-47,-56,159,-41,159,159,-42,-43,-44,-45,]),'EQUAL':([38,43,46,47,50,51,75,103,104,105,106,107,108,126,128,135,136,137,169,170,171,172,173,174,175,],[-55,-31,-34,-46,-53,-54,-48,-32,-33,-35,-36,-37,-52,-47,-56,154,-38,-41,154,-39,-40,-42,-43,-44,-45,]),'NOTEQUAL':([38,43,46,47,50,51,75,103,104,105,106,107,108,126,128,135,136,137,169,170,171,172,173,174,175,],[-55,-31,-34,-46,-53,-54,-48,-32,-33,-35,-36,-37,-52,-47,-56,155,-38,-41,155,-39,-40,-42,-43,-44,-45,]),'LOGICALAND':([38,43,46,47,50,51,75,103,104,105,106,107,108,126,128,134,135,136,137,168,169,170,171,172,173,174,175,],[-55,-31,-34,-46,-53,-54,-48,-32,-33,-35,-36,-37,-52,-47,-56,153,-29,-38,-41,153,-30,-39,-40,-42,-43,-44,-45,]),'LOGICALOR':([38,43,46,47,50,51,75,103,104,105,106,107,108,126,128,133,134,135,136,137,168,169,170,171,172,173,174,175,],[-55,-31,-34,-46,-53,-54,-48,-32,-33,-35,-36,-37,-52,-47,-56,152,-27,-29,-38,-41,-28,-30,-39,-40,-42,-43,-44,-45,]),'ELSE':([78,85,86,110,113,116,117,119,141,149,167,182,185,190,197,201,],[-87,-60,-61,-88,-59,-65,-66,-68,-67,-58,183,-69,-70,-62,-64,-71,]),'GETINT':([112,],[131,]),'FORMATSTRING':([120,],[143,]),'IN':([144,],[164,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'CompUnit':([0,2,3,],[1,11,12,]),'Decl':([0,2,3,57,80,],[2,2,2,81,81,]),'FuncDef':([0,2,3,],[3,3,3,]),'MainFuncDef':([0,2,3,],[4,4,4,]),'ConstDecl':([0,2,3,57,80,],[5,5,5,5,5,]),'VarDecl':([0,2,3,57,80,],[6,6,6,6,6,]),'BType':([0,2,3,9,57,80,],[10,10,10,15,10,10,]),'VarDef':([10,25,],[17,37,]),'ConstDefList':([15,34,],[21,60,]),'ConstDef':([15,34,],[22,22,]),'FuncFParams':([19,58,],[29,95,]),'FuncFParam':([19,58,],[31,31,]),'InitVal':([26,41,109,],[39,68,129,]),'Exp':([26,41,48,57,66,67,80,91,109,112,127,142,151,161,179,180,183,193,194,198,],[40,40,74,84,100,101,84,118,40,130,100,163,84,177,163,188,84,196,84,84,]),'AddExp':([26,27,35,36,41,48,57,63,66,67,80,91,109,112,114,123,124,125,127,142,151,152,153,154,155,156,157,158,159,160,161,179,180,181,183,193,194,198,],[42,54,54,54,42,42,42,54,42,42,42,42,42,42,137,54,54,54,42,42,42,137,137,137,137,172,173,174,175,137,42,42,42,54,42,42,42,42,]),'MulExp':([26,27,35,36,41,48,57,63,66,67,69,70,80,91,109,112,114,123,124,125,127,142,151,152,153,154,155,156,157,158,159,160,161,179,180,181,183,193,194,198,],[43,43,43,43,43,43,43,43,43,43,103,104,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'UnaryExp':([26,27,35,36,41,48,49,57,63,66,67,69,70,71,72,73,80,91,109,112,114,123,124,125,127,142,151,152,153,154,155,156,157,158,159,160,161,179,180,181,183,193,194,198,],[46,46,46,46,46,46,75,46,46,46,46,46,46,105,106,107,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'PrimaryExp':([26,27,35,36,41,48,49,57,63,66,67,69,70,71,72,73,80,91,109,112,114,123,124,125,127,142,151,152,153,154,155,156,157,158,159,160,161,179,180,181,183,193,194,198,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'UnaryOp':([26,27,35,36,41,48,49,57,63,66,67,69,70,71,72,73,80,91,109,112,114,123,124,125,127,142,151,152,153,154,155,156,157,158,159,160,161,179,180,181,183,193,194,198,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'LVal':([26,27,35,36,41,48,49,57,63,66,67,69,70,71,72,73,80,91,109,112,114,115,123,124,125,127,142,151,152,153,154,155,156,157,158,159,160,161,179,180,181,183,184,193,194,198,],[50,50,50,50,50,50,50,83,50,50,50,50,50,50,50,50,83,50,50,50,50,139,50,50,50,50,50,83,50,50,50,50,50,50,50,50,50,50,50,50,50,83,139,50,83,83,]),'ConstExp':([27,35,36,63,123,124,125,181,],[53,62,64,62,62,146,62,62,]),'Block':([30,32,55,57,80,151,183,194,198,],[56,59,77,86,86,86,86,86,86,]),'ConstInitVal':([35,63,123,125,181,],[61,97,97,147,189,]),'BlockItems':([57,80,],[79,111,]),'BlockItem':([57,80,],[80,80,]),'Stmt':([57,80,151,183,194,198,],[82,82,167,190,197,200,]),'ConstInitValList':([63,123,],[96,145,]),'FuncRParams':([66,127,],[99,148,]),'Cond':([114,160,],[132,176,]),'LOrExp':([114,160,],[133,133,]),'LAndExp':([114,152,160,],[134,168,134,]),'EqExp':([114,152,153,160,],[135,135,169,135,]),'RelExp':([114,152,153,154,155,160,],[136,136,136,170,171,136,]),'ForStmt':([115,184,],[138,191,]),'FormatString':([120,],[142,]),'PRINTFParams':([142,179,],[162,186,]),'list':([180,],[187,]),'statements':([198,],[199,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> CompUnit","S'",1,None,None,None),
  ('CompUnit -> Decl CompUnit','CompUnit',2,'p_CompUnit','parser.py',16),
  ('CompUnit -> FuncDef CompUnit','CompUnit',2,'p_CompUnit','parser.py',17),
  ('CompUnit -> MainFuncDef','CompUnit',1,'p_CompUnit','parser.py',18),
  ('Decl -> ConstDecl','Decl',1,'p_Decl','parser.py',26),
  ('Decl -> VarDecl','Decl',1,'p_Decl','parser.py',27),
  ('ConstDecl -> CONST BType ConstDefList SEMICOLON','ConstDecl',4,'p_ConstDecl','parser.py',31),
  ('ConstDefList -> ConstDef','ConstDefList',1,'p_ConstDefList','parser.py',35),
  ('ConstDefList -> ConstDef COMMA ConstDefList','ConstDefList',3,'p_ConstDefList','parser.py',36),
  ('ConstDef -> IDENTIFIER ASSIGN ConstInitVal','ConstDef',3,'p_ConstDef','parser.py',43),
  ('ConstDef -> IDENTIFIER LBRACKET ConstExp RBRACKET ASSIGN ConstInitVal','ConstDef',6,'p_ConstDef','parser.py',44),
  ('ConstDef -> IDENTIFIER LBRACKET ConstExp RBRACKET LBRACKET ConstExp RBRACKET ASSIGN ConstInitVal','ConstDef',9,'p_ConstDef','parser.py',45),
  ('ConstInitVal -> ConstExp','ConstInitVal',1,'p_ConstInitVal','parser.py',54),
  ('ConstInitVal -> LBRACE ConstInitValList RBRACE','ConstInitVal',3,'p_ConstInitVal','parser.py',55),
  ('ConstInitValList -> ConstInitVal','ConstInitValList',1,'p_ConstInitValList','parser.py',62),
  ('ConstInitValList -> ConstInitVal COMMA ConstInitValList','ConstInitValList',3,'p_ConstInitValList','parser.py',63),
  ('ConstExp -> AddExp','ConstExp',1,'p_ConstExp','parser.py',70),
  ('BType -> INT','BType',1,'p_BType','parser.py',75),
  ('VarDecl -> BType VarDef SEMICOLON','VarDecl',3,'p_VarDecl','parser.py',80),
  ('VarDecl -> BType VarDef COMMA VarDef SEMICOLON','VarDecl',5,'p_VarDecl','parser.py',81),
  ('VarDef -> IDENTIFIER','VarDef',1,'p_VarDef','parser.py',89),
  ('VarDef -> IDENTIFIER ASSIGN InitVal','VarDef',3,'p_VarDef','parser.py',90),
  ('VarDef -> IDENTIFIER LBRACKET ConstExp RBRACKET','VarDef',4,'p_VarDef','parser.py',91),
  ('VarDef -> IDENTIFIER LBRACKET ConstExp RBRACKET ASSIGN InitVal','VarDef',6,'p_VarDef','parser.py',92),
  ('InitVal -> Exp','InitVal',1,'p_InitVal','parser.py',104),
  ('InitVal -> LBRACE InitVal RBRACE','InitVal',3,'p_InitVal','parser.py',105),
  ('Exp -> AddExp','Exp',1,'p_Exp','parser.py',113),
  ('LOrExp -> LAndExp','LOrExp',1,'p_LOrExp','parser.py',117),
  ('LOrExp -> LOrExp LOGICALOR LAndExp','LOrExp',3,'p_LOrExp','parser.py',118),
  ('LAndExp -> EqExp','LAndExp',1,'p_LAndExp','parser.py',127),
  ('LAndExp -> LAndExp LOGICALAND EqExp','LAndExp',3,'p_LAndExp','parser.py',128),
  ('AddExp -> MulExp','AddExp',1,'p_AddExp','parser.py',138),
  ('AddExp -> AddExp PLUS MulExp','AddExp',3,'p_AddExp','parser.py',139),
  ('AddExp -> AddExp MINUS MulExp','AddExp',3,'p_AddExp','parser.py',140),
  ('MulExp -> UnaryExp','MulExp',1,'p_MulExp','parser.py',148),
  ('MulExp -> MulExp TIMES UnaryExp','MulExp',3,'p_MulExp','parser.py',149),
  ('MulExp -> MulExp DIVIDE UnaryExp','MulExp',3,'p_MulExp','parser.py',150),
  ('MulExp -> MulExp MOD UnaryExp','MulExp',3,'p_MulExp','parser.py',151),
  ('EqExp -> RelExp','EqExp',1,'p_EqExp','parser.py',159),
  ('EqExp -> EqExp EQUAL RelExp','EqExp',3,'p_EqExp','parser.py',160),
  ('EqExp -> EqExp NOTEQUAL RelExp','EqExp',3,'p_EqExp','parser.py',161),
  ('RelExp -> AddExp','RelExp',1,'p_RelExp','parser.py',169),
  ('RelExp -> RelExp LESS AddExp','RelExp',3,'p_RelExp','parser.py',170),
  ('RelExp -> RelExp LESSEQUAL AddExp','RelExp',3,'p_RelExp','parser.py',171),
  ('RelExp -> RelExp GREATER AddExp','RelExp',3,'p_RelExp','parser.py',172),
  ('RelExp -> RelExp GREATEREQUAL AddExp','RelExp',3,'p_RelExp','parser.py',173),
  ('UnaryExp -> PrimaryExp','UnaryExp',1,'p_UnaryExp','parser.py',181),
  ('UnaryExp -> IDENTIFIER LPAREN FuncRParams RPAREN','UnaryExp',4,'p_UnaryExp','parser.py',182),
  ('UnaryExp -> UnaryOp UnaryExp','UnaryExp',2,'p_UnaryExp','parser.py',183),
  ('UnaryOp -> PLUS','UnaryOp',1,'p_UnaryOp','parser.py',193),
  ('UnaryOp -> MINUS','UnaryOp',1,'p_UnaryOp','parser.py',194),
  ('UnaryOp -> NOT','UnaryOp',1,'p_UnaryOp','parser.py',195),
  ('PrimaryExp -> LPAREN Exp RPAREN','PrimaryExp',3,'p_PrimaryExp','parser.py',200),
  ('PrimaryExp -> LVal','PrimaryExp',1,'p_PrimaryExp','parser.py',201),
  ('PrimaryExp -> INTCONST','PrimaryExp',1,'p_PrimaryExp','parser.py',202),
  ('LVal -> IDENTIFIER','LVal',1,'p_LVal','parser.py',212),
  ('LVal -> IDENTIFIER LBRACKET Exp RBRACKET','LVal',4,'p_LVal','parser.py',213),
  ('MainFuncDef -> INT MAIN LPAREN RPAREN Block','MainFuncDef',5,'p_MainFuncDef','parser.py',221),
  ('Stmt -> LVal ASSIGN Exp SEMICOLON','Stmt',4,'p_Stmt','parser.py',226),
  ('Stmt -> Exp SEMICOLON','Stmt',2,'p_Stmt','parser.py',227),
  ('Stmt -> SEMICOLON','Stmt',1,'p_Stmt','parser.py',228),
  ('Stmt -> Block','Stmt',1,'p_Stmt','parser.py',229),
  ('Stmt -> IF LPAREN Cond RPAREN Stmt ELSE Stmt','Stmt',7,'p_Stmt','parser.py',230),
  ('Stmt -> IF LPAREN Cond RPAREN Stmt','Stmt',5,'p_Stmt','parser.py',231),
  ('Stmt -> FOR LPAREN ForStmt SEMICOLON Cond SEMICOLON ForStmt RPAREN Stmt','Stmt',9,'p_Stmt','parser.py',232),
  ('Stmt -> BREAK SEMICOLON','Stmt',2,'p_Stmt','parser.py',233),
  ('Stmt -> CONTINUE SEMICOLON','Stmt',2,'p_Stmt','parser.py',234),
  ('Stmt -> RETURN Exp SEMICOLON','Stmt',3,'p_Stmt','parser.py',235),
  ('Stmt -> RETURN SEMICOLON','Stmt',2,'p_Stmt','parser.py',236),
  ('Stmt -> LVal ASSIGN GETINT LPAREN RPAREN SEMICOLON','Stmt',6,'p_Stmt','parser.py',237),
  ('Stmt -> PRINTF LPAREN FormatString PRINTFParams RPAREN SEMICOLON','Stmt',6,'p_Stmt','parser.py',238),
  ('Stmt -> PARALLEL LPAREN IDENTIFIER IN LBRACKET list RBRACKET RPAREN LBRACE statements RBRACE','Stmt',11,'p_Stmt','parser.py',239),
  ('PRINTFParams -> Exp','PRINTFParams',1,'p_PRINTFParams','parser.py',285),
  ('PRINTFParams -> Exp COMMA PRINTFParams','PRINTFParams',3,'p_PRINTFParams','parser.py',286),
  ('PRINTFParams -> <empty>','PRINTFParams',0,'p_PRINTFParams_empty','parser.py',293),
  ('ForStmt -> LVal ASSIGN Exp','ForStmt',3,'p_ForStmt','parser.py',298),
  ('ForStmt -> <empty>','ForStmt',0,'p_ForStmt','parser.py',299),
  ('list -> Exp','list',1,'p_list','parser.py',307),
  ('list -> list COMMA Exp','list',3,'p_list','parser.py',308),
  ('statements -> Stmt','statements',1,'p_statements','parser.py',315),
  ('FuncDef -> DEF IDENTIFIER LPAREN FuncFParams RPAREN Block','FuncDef',6,'p_FuncDef','parser.py',321),
  ('FuncDef -> DEF IDENTIFIER LPAREN RPAREN Block','FuncDef',5,'p_FuncDef','parser.py',322),
  ('FuncFParams -> FuncFParam','FuncFParams',1,'p_FuncFParams','parser.py',332),
  ('FuncFParams -> FuncFParam COMMA FuncFParams','FuncFParams',3,'p_FuncFParams','parser.py',333),
  ('FuncFParam -> IDENTIFIER','FuncFParam',1,'p_FuncFParam','parser.py',341),
  ('FuncRParams -> Exp','FuncRParams',1,'p_FuncRParams','parser.py',347),
  ('FuncRParams -> Exp COMMA FuncRParams','FuncRParams',3,'p_FuncRParams','parser.py',348),
  ('Block -> LBRACE RBRACE','Block',2,'p_Block','parser.py',357),
  ('Block -> LBRACE BlockItems RBRACE','Block',3,'p_Block','parser.py',358),
  ('BlockItems -> BlockItem','BlockItems',1,'p_BlockItems','parser.py',367),
  ('BlockItems -> BlockItem BlockItems','BlockItems',2,'p_BlockItems','parser.py',368),
  ('BlockItem -> Decl','BlockItem',1,'p_BlockItem','parser.py',377),
  ('BlockItem -> Stmt','BlockItem',1,'p_BlockItem','parser.py',378),
  ('Cond -> LOrExp','Cond',1,'p_Cond','parser.py',383),
  ('FormatString -> FORMATSTRING','FormatString',1,'p_FormatString','parser.py',388),
]
