
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMA DIVIDE EQUALS IDENTIFIER IN LBRACE LBRACKET LPAREN MINUS NUMBER PARALLEL PLUS RBRACE RBRACKET RETURN RPAREN SEMICOLON TIMESstatement : PARALLEL LPAREN IDENTIFIER IN LBRACKET list RBRACKET RPAREN LBRACE statements RBRACEstatement : IDENTIFIER EQUALS IDENTIFIER TIMES NUMBER SEMICOLONstatement : RETURN IDENTIFIER SEMICOLONstatements : statement statements\n                    | statementlist : NUMBER\n            | list COMMA NUMBER'
    
_lr_action_items = {'PARALLEL':([0,10,17,22,24,25,],[2,-3,-2,2,2,-1,]),'IDENTIFIER':([0,4,5,6,10,17,22,24,25,],[3,7,8,9,-3,-2,3,3,-1,]),'RETURN':([0,10,17,22,24,25,],[4,-3,-2,4,4,-1,]),'$end':([1,10,17,25,],[0,-3,-2,-1,]),'LPAREN':([2,],[5,]),'EQUALS':([3,],[6,]),'SEMICOLON':([7,14,],[10,17,]),'IN':([8,],[11,]),'TIMES':([9,],[12,]),'RBRACE':([10,17,23,24,25,26,],[-3,-2,25,-5,-1,-4,]),'LBRACKET':([11,],[13,]),'NUMBER':([12,13,19,],[14,16,21,]),'RBRACKET':([15,16,21,],[18,-6,-7,]),'COMMA':([15,16,21,],[19,-6,-7,]),'RPAREN':([18,],[20,]),'LBRACE':([20,],[22,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,22,24,],[1,24,24,]),'list':([13,],[15,]),'statements':([22,24,],[23,26,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> PARALLEL LPAREN IDENTIFIER IN LBRACKET list RBRACKET RPAREN LBRACE statements RBRACE','statement',11,'p_statement_parallel','parser.py',6),
  ('statement -> IDENTIFIER EQUALS IDENTIFIER TIMES NUMBER SEMICOLON','statement',6,'p_statement_expr','parser.py',17),
  ('statement -> RETURN IDENTIFIER SEMICOLON','statement',3,'p_statement_return','parser.py',30),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',38),
  ('statements -> statement','statements',1,'p_statements','parser.py',39),
  ('list -> NUMBER','list',1,'p_list','parser.py',47),
  ('list -> list COMMA NUMBER','list',3,'p_list','parser.py',48),
]
